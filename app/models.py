from app import db, login
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from datetime import datetime
from hashlib import md5
from sqlalchemy.dialects.postgresql import ARRAY, INET

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    first_name = db.Column(db.String(64), index=True, unique=True)
    last_name = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    phone = db.Column(db.String(12), index=True, unique=True)
    access = db.Column(db.Integer, default=1)
    password_hash = db.Column(db.String(128))
    last_seen = db.Column(db.DateTime, default=datetime.utcnow)

    def __repr__(self):
        return '<User {}>'.format(self.username)
    
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def avatar(self, size):
        digest = md5(self.email.lower().encode('utf-8')).hexdigest()
        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(
            digest, size)

@login.user_loader
def load_user(id):
    return User.query.get(int(id))

class Follow(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    code = db.Column(db.String(4))
    text_alert = db.Column(db.Boolean)
    email_alert = db.Column(db.Boolean)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return '<Code {}>'.format(self.code)

class Taf(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    station_id = db.Column(db.String(4), index=True)
    issue_time = db.Column(db.DateTime, index=True)
    bulletin_time = db.Column(db.DateTime, index=True)
    valid_time_from = db.Column(db.DateTime, index=True)
    valid_time_to = db.Column(db.DateTime, index=True)
    remarks = db.Column(db.String(500))
    latitude = db.Column(db.Float, index=True)
    longitude = db.Column(db.Float, index=True)
    elevation_m = db.Column(db.Float, index=True)
    fcst_time_from = db.Column(db.DateTime, index=True)
    fcst_time_to = db.Column(db.DateTime, index=True)
    change_indicator = db.Column(db.String(5))
    time_becoming = db.Column(db.DateTime, index=True)
    probability = db.Column(db.Integer, index=True)
    wind_dir_degrees = db.Column(db.Integer)
    wind_speed_kt = db.Column(db.Integer)
    wind_gust_kt = db.Column(db.Integer)
    wind_shear_hgt_ft_agl = db.Column(db.Integer)
    wind_shear_dir_degrees = db.Column(db.Integer)
    wind_shear_speed_kt = db.Column(db.Integer)
    visibility_statute_mi = db.Column(db.Float)
    altim_in_hg = db.Column(db.Float)
    vert_vis_ft = db.Column(db.Float)
    wx_string = db.Column(db.String(500))
    not_decoded = db.Column(db.String(500))
    sky_cover1 = db.Column(db.String(3), index=True)
    cloud_base_ft_agl1 = db.Column(db.Integer)
    cloud_type1 = db.Column(db.String(3), index=True)
    sky_cover2 = db.Column(db.String(3), index=True)
    cloud_base_ft_agl2 = db.Column(db.Integer)
    cloud_type2 = db.Column(db.String(3), index=True)
    turbulence_intensity1 = db.Column(db.Integer)
    turbulence_min_alt_ft_agl1 = db.Column(db.Integer)
    turbulence_max_alt_ft_agl1 = db.Column(db.Integer)
    turbulence_intensity2 = db.Column(db.Integer)
    turbulence_min_alt_ft_agl2 = db.Column(db.Integer)
    turbulence_max_alt_ft_agl2 = db.Column(db.Integer)
    icing_intensity1 = db.Column(db.Integer)
    icing_min_alt_ft_agl1 = db.Column(db.Integer)
    icing_max_alt_ft_agl1 = db.Column(db.Integer)
    icing_intensity2 = db.Column(db.Integer)
    icing_min_alt_ft_agl2 = db.Column(db.Integer)
    icing_max_alt_ft_agl2 = db.Column(db.Integer)
    valid_time = db.Column(db.DateTime)
    sfc_temp_c =  db.Column(db.Float)
    max_temp_c =  db.Column(db.Float)
    min_temp_c = db.Column(db.Float)
    raw_text = db.Column(db.String(1000))

class Station(db.Model):
    station_id = db.Column(db.String(4), primary_key=True)
    wmo_id = db.Column(db.String(10), index=True)
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)
    elevation_m = db.Column(db.Float)
    site = db.Column(db.String(100), index=True)
    state = db.Column(db.String(2), index=True)
    country = db.Column(db.String(2), index=True)
    metar = db.Column(db.Boolean)
    rawinsonde = db.Column(db.Boolean)
    taf = db.Column(db.Boolean)
    nexrad = db.Column(db.Boolean)
    wind_profiler = db.Column(db.Boolean)
    wfo_office = db.Column(db.Boolean)
    synops = db.Column(db.Boolean)

class Metar(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    raw_text = db.Column(db.String(500))
    station_id = db.Column(db.String(4), index=True)
    observation_time = db.Column(db.DateTime)
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)
    temp_c = db.Column(db.Float)
    dewpoint_c = db.Column(db.Float)
    wind_dir_degrees = db.Column(db.Integer)
    wind_speed_kt = db.Column(db.Integer)
    wind_gust_kt = db.Column(db.Integer)
    visibility_statute_mi = db.Column(db.Float)
    altim_in_hg = db.Column(db.Float)
    sea_level_pressure_mb = db.Column(db.Float)
    corrected = db.Column(db.Boolean)
    auto = db.Column(db.Boolean)
    auto_station = db.Column(db.Boolean)
    maintenance_indicator_on = db.Column(db.Boolean)
    no_signal = db.Column(db.Boolean)
    lightning_sensor_off = db.Column(db.Boolean)
    freezing_rain_sensor_off = db.Column(db.Boolean)
    present_weather_sensor_off = db.Column(db.Boolean)
    wx_string = db.Column(db.String(20))
    sky_cover1 = db.Column(db.String(10))
    cloud_base_ft_agl1 = db.Column(db.Integer)
    sky_cover2 = db.Column(db.String(10))
    cloud_base_ft_agl2 = db.Column(db.Integer)
    sky_cover3 = db.Column(db.String(10))
    cloud_base_ft_ag3 = db.Column(db.Integer)
    sky_cover4 = db.Column(db.String(10))
    cloud_base_ft_ag4 = db.Column(db.Integer)
    flight_category = db.Column(db.String)
    three_hr_pressure_tendency_mb = db.Column(db.Float)
    maxT_c = db.Column(db.Float)
    minT_c = db.Column(db.Float)
    maxT24hr_c = db.Column(db.Float)
    minT24hr_c = db.Column(db.Float)
    precip_in = db.Column(db.Float)
    pcp3hr_in = db.Column(db.Float)
    pcp6hr_in = db.Column(db.Float)
    pcp24hr_in = db.Column(db.Float)
    snow_in = db.Column(db.Float)
    vert_vis_ft = db.Column(db.Integer)
    metar_type = db.Column(db.String(10))
    elevation_m = db.Column(db.Float)

class Pirep(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    receipt_time = db.Column(db.DateTime, index=True)
    observation_time = db.Column(db.DateTime, index=True)
    mid_point_assumed = db.Column(db.Boolean)
    no_time_stamp = db.Column(db.Boolean)
    flt_lvl_range = db.Column(db.Boolean)
    above_ground_level_indicated = db.Column(db.Boolean)
    no_flt_lvl = db.Column(db.Boolean)
    bad_location = db.Column(db.Boolean)
    aircraft_ref = db.Column(db.String(10), index=True)
    latitude = db.Column(db.Float, index=True)
    longitude = db.Column(db.Float, index=True)
    altitude_ft_msl = db.Column(db.Integer)
    sky_cover1 = db.Column(db.String(10))
    sky_cover2 = db.Column(db.String(10))
    cloud_base_ft_msl1 = db.Column(db.Integer)
    cloud_base_ft_msl2 = db.Column(db.Integer)
    cloud_top_ft_msl1 = db.Column(db.Integer)
    cloud_top_ft_msl2 = db.Column(db.Integer)
    turbulence_type1 = db.Column(db.String(5))
    turbulence_type2 = db.Column(db.String(5))
    turbulence_intensity1 = db.Column(db.String(10))
    turbulence_intensity2 = db.Column(db.String(10))
    turbulence_base_ft_msl1 = db.Column(db.Integer)
    turbulence_base_ft_msl2 =db.Column(db.Integer)
    turbulence_top_ft_msl1 = db.Column(db.Integer)
    turbulence_top_ft_msl2 = db.Column(db.Integer)
    turbulence_freq1 = db.Column(db.String(10))
    turbulence_freq2 = db.Column(db.String(10))
    icing_type1 = db.Column(db.String(10))
    icing_type2 = db.Column(db.String(10))
    icing_intensity1 = db.Column(db.String(10))
    icing_intensity2 = db.Column(db.String(10))
    icing_base_ft_msl1 = db.Column(db.Integer)
    icing_base_ft_msl2 = db.Column(db.Integer)
    icing_top_ft_msl1 = db.Column(db.Integer)
    icing_top_ft_msl2 = db.Column(db.Integer)
    visibility_statute_mi = db.Column(db.Integer)
    wx_string = db.Column(db.String(10))
    temp_c = db.Column(db.Float)
    wind_dir_degrees = db.Column(db.Integer)
    wind_speed_kt = db.Column(db.Integer)
    vert_gust_kt = db.Column(db.Integer)
    pirep_type = db.Column(db.String(6))
    raw_text = db.Column(db.String(1000))

class Airsigmet(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    raw_text = db.Column(db.String(5000))
    valid_time_from = db.Column(db.DateTime, index=True)
    valid_time_to = db.Column(db.DateTime, index=True)
    lonlat = db.Column(ARRAY(db.Float))
    min_ft_msl = db.Column(db.Integer)
    max_ft_msl = db.Column(db.Integer)
    movement_dir_degrees = db.Column(db.Integer)
    movement_speed_kt = db.Column(db.Integer)
    hazard = db.Column(db.String(20))
    severity = db.Column(db.String(20))
    airsigmet_type = db.Column(db.String(20))

class Access(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    ip = db.Column(INET)
    time = db.Column(db.DateTime, default=datetime.utcnow)